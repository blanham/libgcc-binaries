name: Build libgcc

on: [push]

jobs:
  build:
    name: Build and upload libgcc
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
      - name: Install dependencies
        run: pacman --noconfirm -Syu && pacman --needed --noconfirm -S base-devel git autoconf automake wget

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Git config
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Select GCC and binutils versions
        run: echo -n "12.2.0" > gcc-version && echo -n "2.40" > binutils-version


      - name: Build the toolchain (i386)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=i386-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (i386)
        run: cp toolchain/lib/gcc/i386-elf/`cat gcc-version`/libgcc.a ./libgcc-i386.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (i686)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=i686-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (i686)
        run: cp toolchain/lib/gcc/i686-elf/`cat gcc-version`/libgcc.a ./libgcc-i686.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (x86_64)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=x86_64-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (x86_64)
        run: cp toolchain/lib/gcc/x86_64-elf/`cat gcc-version`/libgcc.a ./libgcc-x86_64.a

      - name: Copy no-red-zone libgcc.a (x86_64)
        run: cp toolchain/lib/gcc/x86_64-elf/`cat gcc-version`/no-red-zone/libgcc.a ./libgcc-x86_64-no-red-zone.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (arm)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=arm-none-eabi GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (arm)
        run: cp toolchain/lib/gcc/arm-none-eabi/`cat gcc-version`/libgcc.a ./libgcc-arm.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (aarch64)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=aarch64-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (aarch64)
        run: cp toolchain/lib/gcc/aarch64-elf/`cat gcc-version`/libgcc.a ./libgcc-aarch64.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (riscv32)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=riscv32-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (riscv32)
        run: cp toolchain/lib/gcc/riscv32-elf/`cat gcc-version`/libgcc.a ./libgcc-riscv32.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Build the toolchain (riscv64)
        run: CFLAGS_FOR_TARGET="-Os -pipe" TARGET=riscv64-elf GCCVERSION="`cat gcc-version`" BINUTILSVERSION="`cat binutils-version`" ./make_toolchain.sh

      - name: Copy libgcc.a (riscv64)
        run: cp toolchain/lib/gcc/riscv64-elf/`cat gcc-version`/libgcc.a ./libgcc-riscv64.a

      - name: Clean toolchain dir
        run: rm -rf toolchain


      - name: Push new binaries
        run: |
          git config user.name 'mintsuki'
          git config user.email 'mintsuki@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/mintsuki/libgcc-binaries.git
          git fetch --all
          git add .
          git commit -m "Upload binaries [ci skip]"
          git push origin trunk
